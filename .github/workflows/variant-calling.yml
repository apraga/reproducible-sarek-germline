name: Variant calling

on:
  push:
    branches:
    - main
  workflow_dispatch:
    inputs:
      sarek_revision:
        description: 'Sarek pipeline revision/tag to test'
        required: false
        default: 'master'
        type: string


env:
  SAREK_REVISION: ${{ github.event.inputs.sarek_revision || 'master' }}
  NXF_VER: "24.04.2"

jobs:
  test-sarek-pipeline:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: cachix/install-nix-action@v31
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: reproducible-sarek-germline
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    # FIXME force sarek version
    - name: Clone Sarek
      run: |
        git clone https://github.com/nf-core/sarek.git
        cd sarek
        git checkout $SAREK_REVISION
        echo "Current commit: $(git rev-parse HEAD)"

    # FIXME nextflow does not run in nix here
    # Do not work for 24.10...
    - name: Install nextflow manually
      run: |
        wget https://github.com/nextflow-io/nextflow/releases/download/v24.04.2/nextflow-24.04.2-all
        mv nextflow-24.04.2-all nextflow
        chmod +x nextflow

    - name: Install dependencies with nix (with cachix)
      run: |
        cachix use reproducible-sarek-germline
        nix profile install . | cachix push reproducible-sarek-germline

    # Use a small genome in git. Skip base recalibration as it needs dbsnp
    - name: SNV calling with bwa + {mpileup,haplotypecaller,freebayes,strelka}
      run:  |
        ./nextflow run sarek/main.nf --input tests/ada2-e5-e6.csv --outdir bwa-varcall  --tools mpileup,haplotypecaller,freebayes,strelka  -c tests/test.config --skip_tools baserecalibrator,haplotypecaller_filter

    - name: SNV calling with bwa-mem2 + {mpileup,haplotypecaller,freebayes,strelka}
      run:  |
        ./nextflow run sarek/main.nf --input tests/ada2-e5-e6.csv --outdir bwa-mem2-varcall --aligner bwa-mem2 --tools mpileup,haplotypecaller,freebayes,strelka  -c tests/test.config --skip_tools baserecalibrator,haplotypecaller_filter

    - name: SNV calling with dragmap + {mpileup,haplotypecaller,freebayes,strelka}
      run:  |
        ./nextflow run sarek/main.nf --input tests/ada2-e5-e6.csv --outdir dragmap-varcall --aligner dragmap --tools mpileup,haplotypecaller,freebayes,strelka  -c tests/test.config --skip_tools baserecalibrator,haplotypecaller_filter

    - name: SNV calling check
      run: |
        aligners=("bwa" "bwa-mem2" "dragmap")

        reference_vcf="tests/ada2-e5-e6_ref.vcf.gz"
        all_passed=true

        for aligner in "${aligners[@]}"; do
          echo "üß¨ Testing with aligner: $aligner"

          # Define variant callers and their corresponding VCF files for this aligner
          declare -A variant_callers=(
            ["bcftools"]="${aligner}-varcall/variant_calling/bcftools/test/test.bcftools.vcf.gz"
            ["freebayes"]="${aligner}-varcall/variant_calling/freebayes/test/test.freebayes.vcf.gz"
            ["haplotypecaller"]="${aligner}-varcall/variant_calling/haplotypecaller/test/test.haplotypecaller.vcf.gz"
            ["strelka"]="${aligner}-varcall/variant_calling/strelka/test/test.strelka.variants.vcf.gz"
          )

          for caller in "${!variant_callers[@]}"; do
            vcf_file="${variant_callers[$caller]}"
            if [ ! -f "$vcf_file" ]; then
              echo "‚ùå $caller ($aligner): VCF file not found: $vcf_file"
              all_passed=false
              continue
            fi
            diff_dir="diff_${caller}_${aligner}"
            bcftools isec "$reference_vcf" "$vcf_file" -n =2 -p "$diff_dir"
            chr22_count=$(zgrep -c '^chr22' "$diff_dir/0001.vcf")
            if [ "$chr22_count" -eq "2" ]; then
              echo "‚úÖ $caller ($aligner): All variants found ($chr22_count chr22 variants)"
            else
              echo "‚ö†Ô∏è  $caller ($aligner): Found $chr22_count differences in chr22 variants (expected 2)"
              all_passed=false
            fi
          done
          unset variant_callers  # Clean up for next iteration
        done

        [ "$all_passed" = true ]

    - name: CNV calling with bwa + {tiddit,manta}
      run:  |
        ./nextflow run sarek/main.nf --input tests/rbfox2-i11.csv --outdir test-cnv  --tools tiddit,manta  -c tests/test.config  --skip_tools baserecalibrator

    - name: Check CNV calling
      run: |
        # expected "chr22 35737479 DEL 720"
        res_tiddit=$(bcftools query -i 'POS=35737479 && INFO/SVTYPE="DEL" && abs(INFO/SVLEN)=720'     -f '%CHROM %POS %INFO/SVTYPE %INFO/SVLEN\n'     test-cnv/variant_calling/tiddit/test/test.tiddit.vcf.gz | wc -l)
        res_manta=$(bcftools query -i 'POS=35737460 && INFO/SVTYPE="DEL" && abs(INFO/SVLEN)=766'     -f '%CHROM %POS %INFO/SVTYPE %INFO/SVLEN\n'     test-cnv/variant_calling/manta/test/test.manta.diploid_sv.vcf.gz | wc -l)
        if [ $res_tiddit -eq 1 ] && [ $res_manta -eq 1 ]; then
          echo "‚úì Test PASSED: deletion found"
          exit 0
        else
          if [ $res_tiddit -ne 1; then
            echo "‚úó Test FAILED (tiddit): Output does not match"
            zcat test-cnv/variant_calling/tiddit/test/test.tiddit.vcf.gz
          else
            echo "‚úó Test FAILED (manta): Output does not match"
            zcat test-cnv/variant_calling/manta/test/test.manta.diploid_sv.vcf.gz
          fi
          exit 1

        fi



