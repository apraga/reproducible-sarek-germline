name: Sarek Pipeline CI


on:
  push:
    branches: 
    - main
    - dev
    - test-sarek
  workflow_dispatch:
    inputs:
      sarek_revision:
        description: 'Sarek pipeline revision/tag to test'
        required: false
        default: 'master'
        type: string


env:
  SAREK_REVISION: ${{ github.event.inputs.sarek_revision || 'master' }}
  NXF_VER: "24.04.2"

jobs:
  test-sarek-pipeline:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Checkout repository
      uses: actions/checkout@v4

    - uses: cachix/install-nix-action@v31
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: reproducible-sarek-germline
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    # FIXME force sarek version
    - name: Clone Sarek
      run: |
        git clone https://github.com/nf-core/sarek.git
        cd sarek
        git checkout $SAREK_REVISION
        echo "Current commit: $(git rev-parse HEAD)"

    # FIXME nextflow does not run in nix here
    # - name: Set up Nextflow
    #   uses: nf-core/setup-nextflow@v2
    #   with:
    #       version: "${{ matrix.NXF_VER }}"

    # Do not work for 24.10...
    - name: Install nextflow manually
      run: |
        wget https://github.com/nextflow-io/nextflow/releases/download/v24.04.2/nextflow-24.04.2-all
        mv nextflow-24.04.2-all nextflow
        chmod +x nextflow

    - name: Install depedencies with nix
      run: |
          nix profile install .#bcftools .#bwa .#fastp .#htslib .#multiqc \
            .#samtools .#gatk .#mosdepth .#vcftools .#fastqc
          # .#nextflow

    # Use a small genome in git. Skip base recalibration as it needs dbsnp
    - name: Run sarek
      run:  |
        ./nextflow run sarek/main.nf --input tests/ada2-e5-e6.csv --outdir ada2-small  --tools mpileup  -c tests/test.config --skip_tools baserecalibrator

    - name: Check pipeline execution status
      run: |
         if [ $? -eq 0 ]; then
           echo "✅ Pipeline completed successfully"
         else
           echo "❌ Pipeline failed"
           exit 1
         fi

    - name: Compare results with reference
      run: |
          bcftools isec tests/ada2-e5-e6_ref.vcf.gz \
            ada2-small/variant_calling/bcftools/test/test.bcftools.vcf.gz \
           -n =2 \
           -p diff

          # Count chr22 variants in the diff
          chr22_count=$(zgrep -c '^chr22' diff/0001.vcf || echo "0")
          if [ "$chr22_count" -eq "2" ]; then
            echo "✅ All variants foud"
          else
            echo "⚠️  Found $chr22_count differences in chr22 variants"
          fi
