
@article{koster_snakemake_2012,
	title = {Snakemake— a scalable bioinformatics workflow engine},
	volume = {28},
	url = {http://dx.doi.org/10.1093/bioinformatics/bts480},
	doi = {10.1093/bioinformatics/bts480},
	abstract = {Summary: Snakemake is a workflow engine that provides a readable Python-based workflow definition language and a powerful execution environment that scales from single-core workstations to compute clusters without modifying the workflow. It is the first system to support the use of automatically inferred multiple named wildcards (or variables) in input and output filenames. Availability: http://snakemake.googlecode.com. Contact: johannes.koester@uni-due.de},
	language = {en},
	number = {19},
	journal = {Bioinformatics},
	author = {Köster, Johannes and Rahmann, Sven},
	month = oct,
	year = {2012},
	note = {Publisher: Oxford University Press (OUP)},
	keywords = {pipeline},
	pages = {2520--2522},
}

@article{krusche_best_2019,
	title = {Best practices for benchmarking germline small-variant calls in human genomes},
	volume = {37},
	url = {http://dx.doi.org/10.1038/s41587-019-0054-x},
	doi = {10.1038/s41587-019-0054-x},
	language = {en},
	number = {5},
	journal = {Nature Biotechnology},
	author = {Krusche, Peter and Trigg, Len and Boutros, Paul C. and Mason, Christopher E. and De La Vega, Francisco M. and Moore, Benjamin L. and Gonzalez-Porta, Mar and Eberle, Michael A. and Tezak, Zivana and Lababidi, Samir and Truty, Rebecca and Asimenos, George and Funke, Birgit and Fleharty, Mark and Chapman, Brad A. and Salit, Marc and Zook, Justin M.},
	month = may,
	year = {2019},
	note = {Publisher: Springer Science and Business Media LLC},
	keywords = {pipeline},
	pages = {555--560},
}

@article{di_tommaso_nextflow_2017,
	title = {Nextflow enables reproducible computational workflows},
	volume = {35},
	url = {http://dx.doi.org/10.1038/nbt.3820},
	doi = {10.1038/nbt.3820},
	language = {en},
	number = {4},
	journal = {Nature Biotechnology},
	author = {Di Tommaso, Paolo and Chatzou, Maria and Floden, Evan W and Barja, Pablo Prieto and Palumbo, Emilio and Notredame, Cedric},
	month = apr,
	year = {2017},
	note = {Publisher: Springer Science and Business Media LLC},
	keywords = {pipeline},
	pages = {316--319},
}

@article{garcia_sarek_2020,
	title = {Sarek: {A} portable workflow for whole-genome sequencing analysis of germline and somatic variants},
	volume = {9},
	url = {http://dx.doi.org/10.12688/f1000research.16665.2},
	doi = {10.12688/f1000research.16665.2},
	abstract = {Whole-genome sequencing (WGS) is a fundamental technology for research to advance precision medicine, but the limited availability of portable and user-friendly workflows for WGS analyses poses a major challenge for many research groups and hampers scientific progress. Here we present Sarek, an open-source workflow to detect germline variants and somatic mutations based on sequencing data from WGS, whole-exome sequencing (WES), or gene panels. Sarek features (i) easy installation, (ii) robust portability across different computer environments, (iii) comprehensive documentation, (iv) transparent and easy-to-read code, and (v) extensive quality metrics reporting. Sarek is implemented in the Nextflow workflow language and supports both Docker and Singularity containers as well as Conda environments, making it ideal for easy deployment on any POSIX-compatible computers and cloud compute environments. Sarek follows the GATK best-practice recommendations for read alignment and pre-processing, and includes a wide range of software for the identification and annotation of germline and somatic single-nucleotide variants, insertion and deletion variants, structural variants, tumour sample purity, and variations in ploidy and copy number. Sarek offers easy, efficient, and reproducible WGS analyses, and can readily be used both as a production workflow at sequencing facilities and as a powerful stand-alone tool for individual research groups. The Sarek source code, documentation and installation instructions are freely available at https://github.com/nf-core/sarek and at https://nf-co.re/sarek/ .},
	language = {en},
	journal = {F1000Research},
	author = {Garcia, Maxime and Juhos, Szilveszter and Larsson, Malin and Olason, Pall I. and Martin, Marcel and Eisfeldt, Jesper and DiLorenzo, Sebastian and Sandgren, Johanna and Díaz De Ståhl, Teresita and Ewels, Philip and Wirta, Valtteri and Nistér, Monica and Käller, Max and Nystedt, Björn},
	month = sep,
	year = {2020},
	note = {Publisher: F1000 Research Ltd},
	keywords = {pipeline},
	pages = {63},
}

@article{ewels_nf-core_2020,
	title = {The nf-core framework for community-curated bioinformatics pipelines},
	volume = {38},
	issn = {1087-0156, 1546-1696},
	url = {https://www.nature.com/articles/s41587-020-0439-x},
	doi = {10.1038/s41587-020-0439-x},
	language = {en},
	number = {3},
	urldate = {2025-07-06},
	journal = {Nature Biotechnology},
	author = {Ewels, Philip A. and Peltzer, Alexander and Fillinger, Sven and Patel, Harshil and Alneberg, Johannes and Wilm, Andreas and Garcia, Maxime Ulysse and Di Tommaso, Paolo and Nahnsen, Sven},
	month = mar,
	year = {2020},
	pages = {276--278},
}

@article{baykal_genomic_2024,
	title = {Genomic reproducibility in the bioinformatics era},
	volume = {25},
	issn = {1474-760X},
	url = {https://genomebiology.biomedcentral.com/articles/10.1186/s13059-024-03343-2},
	doi = {10.1186/s13059-024-03343-2},
	abstract = {Abstract
            In biomedical research, validating a scientific discovery hinges on the reproducibility of its experimental results. However, in genomics, the definition and implementation of reproducibility remain imprecise. We argue that genomic reproducibility, defined as the ability of bioinformatics tools to maintain consistent results across technical replicates, is essential for advancing scientific knowledge and medical applications. Initially, we examine different interpretations of reproducibility in genomics to clarify terms. Subsequently, we discuss the impact of bioinformatics tools on genomic reproducibility and explore methods for evaluating these tools regarding their effectiveness in ensuring genomic reproducibility. Finally, we recommend best practices to improve genomic reproducibility.},
	language = {en},
	number = {1},
	urldate = {2025-07-06},
	journal = {Genome Biology},
	author = {Baykal, Pelin Icer and Łabaj, Paweł Piotr and Markowetz, Florian and Schriml, Lynn M. and Stekhoven, Daniel J. and Mangul, Serghei and Beerenwinkel, Niko},
	month = aug,
	year = {2024},
	pages = {213},
}

@article{ziemann_five_2023,
	title = {The five pillars of computational reproducibility: bioinformatics and beyond},
	volume = {24},
	copyright = {https://creativecommons.org/licenses/by/4.0/},
	issn = {1467-5463, 1477-4054},
	shorttitle = {The five pillars of computational reproducibility},
	url = {https://academic.oup.com/bib/article/doi/10.1093/bib/bbad375/7326135},
	doi = {10.1093/bib/bbad375},
	abstract = {Abstract
            Computational reproducibility is a simple premise in theory, but is difficult to achieve in practice. Building upon past efforts and proposals to maximize reproducibility and rigor in bioinformatics, we present a framework called the five pillars of reproducible computational research. These include (1) literate programming, (2) code version control and sharing, (3) compute environment control, (4) persistent data sharing and (5) documentation. These practices will ensure that computational research work can be reproduced quickly and easily, long into the future. This guide is designed for bioinformatics data analysts and bioinformaticians in training, but should be relevant to other domains of study.},
	language = {en},
	number = {6},
	urldate = {2025-07-06},
	journal = {Briefings in Bioinformatics},
	author = {Ziemann, Mark and Poulain, Pierre and Bora, Anusuiya},
	month = sep,
	year = {2023},
	pages = {bbad375},
	file = {Full Text:/home/alex/Zotero/storage/6PVVQYAV/Ziemann et al. - 2023 - The five pillars of computational reproducibility bioinformatics and beyond.pdf:application/pdf},
}

@misc{courtes_functional_2013,
	title = {Functional {Package} {Management} with {Guix}},
	copyright = {arXiv.org perpetual, non-exclusive license},
	url = {https://arxiv.org/abs/1305.4584},
	doi = {10.48550/ARXIV.1305.4584},
	abstract = {We describe the design and implementation of GNU Guix, a purely functional package manager designed to support a complete GNU/Linux distribution. Guix supports transactional upgrades and roll-backs, unprivileged package management, per-user profiles, and garbage collection. It builds upon the low-level build and deployment layer of the Nix package manager. Guix uses Scheme as its programming interface. In particular, we devise an embedded domain-specific language (EDSL) to describe and compose packages. We demonstrate how it allows us to benefit from the host general-purpose programming language while not compromising on expressiveness. Second, we show the use of Scheme to write build programs, leading to "two-tier" programming system.},
	urldate = {2025-07-07},
	publisher = {arXiv},
	author = {Courtès, Ludovic},
	year = {2013},
	note = {Version Number: 1},
	keywords = {FOS: Computer and information sciences, Programming Languages (cs.PL)},
}

@inproceedings{dolstra_nix_2004,
	title = {Nix: {A} {Safe} and {Policy}-{Free} {System} for {Software} {Deployment}.},
	volume = {4},
	booktitle = {{LISA}},
	author = {Dolstra, Eelco and De Jonge, Merijn and Visser, Eelco and {others}},
	year = {2004},
	pages = {79--92},
}

@article{halchenko_datalad_2021,
	title = {{DataLad}: distributed system for joint management of code, data, and their relationship},
	volume = {6},
	copyright = {http://creativecommons.org/licenses/by/4.0/},
	issn = {2475-9066},
	shorttitle = {{DataLad}},
	url = {https://joss.theoj.org/papers/10.21105/joss.03262},
	doi = {10.21105/joss.03262},
	number = {63},
	urldate = {2025-07-07},
	journal = {Journal of Open Source Software},
	author = {Halchenko, Yaroslav and Meyer, Kyle and Poldrack, Benjamin and Solanky, Debanjum and Wagner, Adina and Gors, Jason and MacFarlane, Dave and Pustina, Dorian and Sochat, Vanessa and Ghosh, Satrajit and Mönch, Christian and Markiewicz, Christopher and Waite, Laura and Shlyakhter, Ilya and De La Vega, Alejandro and Hayashi, Soichi and Häusler, Christian and Poline, Jean-Baptiste and Kadelka, Tobias and Skytén, Kusti and Jarecka, Dorota and Kennedy, David and Strauss, Ted and Cieslak, Matt and Vavra, Peter and Ioanas, Horea-Ioan and Schneider, Robin and Pflüger, Mika and Haxby, James and Eickhoff, Simon and Hanke, Michael},
	month = jul,
	year = {2021},
	note = {Publisher: The Open Journal},
	pages = {3262},
	file = {Full Text:/home/alex/Zotero/storage/2FTLRV9U/Halchenko et al. - 2021 - DataLad distributed system for joint management of code, data, and their relationship.pdf:application/pdf},
}
